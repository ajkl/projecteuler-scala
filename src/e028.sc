import projecteuler._
object e028 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  /*
  21 22 23 24 25
	20  7  8  9 10
	19  6  1  2 11
	18  5  4  3 12
	17 16 15 14 13
	*/
	
	//solution 1 recursive solution
	def getDiagSum1(n: Int): Long = {
		if(n == 1) 1
		else {
			val nSqr: Long = n * n
			nSqr + nSqr - (n - 1) + nSqr - 2 * (n - 1) + nSqr - 3 * (n - 1) + getDiagSum1(n - 2)
		}
	}                                         //> getDiagSum1: (n: Int)Long
	getDiagSum1(1001)                         //> res0: Long = 669171001
	
	//solution 2 tail recursive solution
	def getDiagSum2(n: Int): Long = {
		def helper(n: Int, acc: Long): Long = {
			if (n == 1) acc
			else {
				val nSqr: Long = n * n
				helper(n - 2, acc + nSqr + nSqr - (n - 1) + nSqr - 2 * (n - 1) + nSqr - 3 * (n - 1))
			}
		}
		helper(n, 1)
	}                                         //> getDiagSum2: (n: Int)Long
	getDiagSum2(1001)                         //> res1: Long = 669171001
	
	//solution 3 by generating individual diagonals
	val size = 1001                           //> size  : Int = 1001
	
	val baseList = (3 to size) by 2           //> baseList  : scala.collection.immutable.Range = Range(3, 5, 7, 9, 11, 13, 15,
                                                  //|  17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53,
                                                  //|  55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91,
                                                  //|  93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123,
                                                  //|  125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 
                                                  //| 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 1
                                                  //| 85, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 21
                                                  //| 5, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245
                                                  //| , 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275,
                                                  //|  277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 
                                                  //| 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 3
                                                  //| 37, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 36
                                                  //| 7, 369, 371, 373, 375, 3
                                                  //| Output exceeds cutoff limit.
	//right top diagonal
	val rightTopDiag = baseList
											.map(Util.square(_))
                                                  //> rightTopDiag  : scala.collection.immutable.IndexedSeq[Long] = Vector(9, 25, 
                                                  //| 49, 81, 121, 169, 225, 289, 361, 441, 529, 625, 729, 841, 961, 1089, 1225, 1
                                                  //| 369, 1521, 1681, 1849, 2025, 2209, 2401, 2601, 2809, 3025, 3249, 3481, 3721,
                                                  //|  3969, 4225, 4489, 4761, 5041, 5329, 5625, 5929, 6241, 6561, 6889, 7225, 756
                                                  //| 9, 7921, 8281, 8649, 9025, 9409, 9801, 10201, 10609, 11025, 11449, 11881, 12
                                                  //| 321, 12769, 13225, 13689, 14161, 14641, 15129, 15625, 16129, 16641, 17161, 1
                                                  //| 7689, 18225, 18769, 19321, 19881, 20449, 21025, 21609, 22201, 22801, 23409, 
                                                  //| 24025, 24649, 25281, 25921, 26569, 27225, 27889, 28561, 29241, 29929, 30625,
                                                  //|  31329, 32041, 32761, 33489, 34225, 34969, 35721, 36481, 37249, 38025, 38809
                                                  //| , 39601, 40401, 41209, 42025, 42849, 43681, 44521, 45369, 46225, 47089, 4796
                                                  //| 1, 48841, 49729, 50625, 51529, 52441, 53361, 54289, 55225, 56169, 57121, 580
                                                  //| 81, 59049, 60025, 61009, 62001, 63001, 64009, 65025, 66049, 67081, 68121, 69
                                                  //| 169, 70225, 71289, 72361
                                                  //| Output exceeds cutoff limit.
											
  val numSqrZip = baseList zip rightTopDiag       //> numSqrZip  : scala.collection.immutable.IndexedSeq[(Int, Long)] = Vector((3,
                                                  //| 9), (5,25), (7,49), (9,81), (11,121), (13,169), (15,225), (17,289), (19,361)
                                                  //| , (21,441), (23,529), (25,625), (27,729), (29,841), (31,961), (33,1089), (35
                                                  //| ,1225), (37,1369), (39,1521), (41,1681), (43,1849), (45,2025), (47,2209), (4
                                                  //| 9,2401), (51,2601), (53,2809), (55,3025), (57,3249), (59,3481), (61,3721), (
                                                  //| 63,3969), (65,4225), (67,4489), (69,4761), (71,5041), (73,5329), (75,5625), 
                                                  //| (77,5929), (79,6241), (81,6561), (83,6889), (85,7225), (87,7569), (89,7921),
                                                  //|  (91,8281), (93,8649), (95,9025), (97,9409), (99,9801), (101,10201), (103,10
                                                  //| 609), (105,11025), (107,11449), (109,11881), (111,12321), (113,12769), (115,
                                                  //| 13225), (117,13689), (119,14161), (121,14641), (123,15129), (125,15625), (12
                                                  //| 7,16129), (129,16641), (131,17161), (133,17689), (135,18225), (137,18769), (
                                                  //| 139,19321), (141,19881), (143,20449), (145,21025), (147,21609), (149,22201),
                                                  //|  (151,22801), (153,23409
                                                  //| Output exceeds cutoff limit.
  
  //left top diagonal
  val leftTopDiag = numSqrZip
												.map(x => x._2 - (x._1 - 1) * 1)
                                                  //> leftTopDiag  : scala.collection.immutable.IndexedSeq[Long] = Vector(7, 21, 
                                                  //| 43, 73, 111, 157, 211, 273, 343, 421, 507, 601, 703, 813, 931, 1057, 1191, 
                                                  //| 1333, 1483, 1641, 1807, 1981, 2163, 2353, 2551, 2757, 2971, 3193, 3423, 366
                                                  //| 1, 3907, 4161, 4423, 4693, 4971, 5257, 5551, 5853, 6163, 6481, 6807, 7141, 
                                                  //| 7483, 7833, 8191, 8557, 8931, 9313, 9703, 10101, 10507, 10921, 11343, 11773
                                                  //| , 12211, 12657, 13111, 13573, 14043, 14521, 15007, 15501, 16003, 16513, 170
                                                  //| 31, 17557, 18091, 18633, 19183, 19741, 20307, 20881, 21463, 22053, 22651, 2
                                                  //| 3257, 23871, 24493, 25123, 25761, 26407, 27061, 27723, 28393, 29071, 29757,
                                                  //|  30451, 31153, 31863, 32581, 33307, 34041, 34783, 35533, 36291, 37057, 3783
                                                  //| 1, 38613, 39403, 40201, 41007, 41821, 42643, 43473, 44311, 45157, 46011, 46
                                                  //| 873, 47743, 48621, 49507, 50401, 51303, 52213, 53131, 54057, 54991, 55933, 
                                                  //| 56883, 57841, 58807, 59781, 60763, 61753, 62751, 63757, 64771, 65793, 66823
                                                  //| , 67861, 68907, 69961, 
                                                  //| Output exceeds cutoff limit.
	//left bottom diagonal
	val leftBottomDiag = numSqrZip
												.map(x => x._2 - (x._1 - 1) * 2)
                                                  //> leftBottomDiag  : scala.collection.immutable.IndexedSeq[Long] = Vector(5, 1
                                                  //| 7, 37, 65, 101, 145, 197, 257, 325, 401, 485, 577, 677, 785, 901, 1025, 115
                                                  //| 7, 1297, 1445, 1601, 1765, 1937, 2117, 2305, 2501, 2705, 2917, 3137, 3365, 
                                                  //| 3601, 3845, 4097, 4357, 4625, 4901, 5185, 5477, 5777, 6085, 6401, 6725, 705
                                                  //| 7, 7397, 7745, 8101, 8465, 8837, 9217, 9605, 10001, 10405, 10817, 11237, 11
                                                  //| 665, 12101, 12545, 12997, 13457, 13925, 14401, 14885, 15377, 15877, 16385, 
                                                  //| 16901, 17425, 17957, 18497, 19045, 19601, 20165, 20737, 21317, 21905, 22501
                                                  //| , 23105, 23717, 24337, 24965, 25601, 26245, 26897, 27557, 28225, 28901, 295
                                                  //| 85, 30277, 30977, 31685, 32401, 33125, 33857, 34597, 35345, 36101, 36865, 3
                                                  //| 7637, 38417, 39205, 40001, 40805, 41617, 42437, 43265, 44101, 44945, 45797,
                                                  //|  46657, 47525, 48401, 49285, 50177, 51077, 51985, 52901, 53825, 54757, 5569
                                                  //| 7, 56645, 57601, 58565, 59537, 60517, 61505, 62501, 63505, 64517, 65537, 66
                                                  //| 565, 67601, 68645, 6969
                                                  //| Output exceeds cutoff limit.
												
	//right bottom diagonal
	val rightBottomDiag = numSqrZip
												.map(x => x._2 - (x._1 - 1) * 3)
                                                  //> rightBottomDiag  : scala.collection.immutable.IndexedSeq[Long] = Vector(3, 
                                                  //| 13, 31, 57, 91, 133, 183, 241, 307, 381, 463, 553, 651, 757, 871, 993, 1123
                                                  //| , 1261, 1407, 1561, 1723, 1893, 2071, 2257, 2451, 2653, 2863, 3081, 3307, 3
                                                  //| 541, 3783, 4033, 4291, 4557, 4831, 5113, 5403, 5701, 6007, 6321, 6643, 6973
                                                  //| , 7311, 7657, 8011, 8373, 8743, 9121, 9507, 9901, 10303, 10713, 11131, 1155
                                                  //| 7, 11991, 12433, 12883, 13341, 13807, 14281, 14763, 15253, 15751, 16257, 16
                                                  //| 771, 17293, 17823, 18361, 18907, 19461, 20023, 20593, 21171, 21757, 22351, 
                                                  //| 22953, 23563, 24181, 24807, 25441, 26083, 26733, 27391, 28057, 28731, 29413
                                                  //| , 30103, 30801, 31507, 32221, 32943, 33673, 34411, 35157, 35911, 36673, 374
                                                  //| 43, 38221, 39007, 39801, 40603, 41413, 42231, 43057, 43891, 44733, 45583, 4
                                                  //| 6441, 47307, 48181, 49063, 49953, 50851, 51757, 52671, 53593, 54523, 55461,
                                                  //|  56407, 57361, 58323, 59293, 60271, 61257, 62251, 63253, 64263, 65281, 6630
                                                  //| 7, 67341, 68383, 69433,
                                                  //| Output exceeds cutoff limit.
	
	1 + rightTopDiag.sum + leftTopDiag.sum + leftBottomDiag.sum + rightBottomDiag.sum
                                                  //> res2: Long = 669171001
}